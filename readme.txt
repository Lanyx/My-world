contact details: wochlik.gm@gmail.com

"Grzeg's World" is a fictional cartography assistance software. It uses MongoDB
and pymongo. It supports 2 names per geographic entity, and accepts any UTF-8
character.

This software supports any drawing package (preferably vector). This drawing
package must be able to return the paper x and y co-ordinates in millimeters.
More critically, "Grzeg's World" needs the area in square millimeters of the
polygon representing the political region.
[After thought: Mind you, it will also work on raster maps too. The scale would
be in mm/pix. So, for a scale of 1:50,000, the edge of one pixel would
represent 50m on the ground. The area would be determined by counting the pixels
inside of the polygon.]

It features random name generation, in those two languages. By default, the
names are in the inventor's conlang (constructed language). Parts of the
software can be customized to your own culture (worldly or fictional).


SETUP GUIDE:
1.)     Install Python

2.)     Install MongoDB

3.)     Install 'pymongo' Python component

4.)     Copy this project onto local drive (c:\Projects\Python\My_world)

5.)     ** Trick **
    a.) Navigate to 'my_world' though windows.
    b.) With nothing selected do SHIFT + Right Click
    c.) Select 'Open command window here' option from the popup menu

6.)     Configure the shell to UTF-8 input:
    a.) Right click on the frame and select Properties.
    b.) Select a UTF-8 font (in my case 'Lucida Console')
    c.) Click OK and return to the command window.

TUTORIAL:
1.)     Enter 'python my_world.py' into the command shell.

2.)     Confirm that UTF-8 characters are correctly displayed: The title should
        be as follows: GRZEG'S WORLD / СВЯТ ГЖЭСЯ: The latter part is in
        Cyrillic, which is the second geographic script entry.

3.)     Install the 'defaults' databases (Enter '!')

4.)     Add the details of your map: Enter 'D', then 'M' Follow the prompts.
        the scale is very important, as all calculations are based on it.
        If you are playing around, and don't have a map, enter '2e6' (1:2000000)
        for the scale. This will give you 1mm = 2km, and 1sq.mm = 400ha.

5.)     Create the 'world' as the ultimate ancestor first. From the
        'Destinations' sub-menu, select '1' Type in 'i_am_world' as the parent.

    a.) At this level, the map is not critical. Hence, option '0' for the map
        question is appropriate.

    b.) Select '0' for the geo-political division

    c.) Select '0' for the purpose of the region.

    d.) Choose 'n' to random name.

    e.) Type in 'World' for the location in Latin

    f.) Type in, or copy in 'Свьят' for the location in Cyrillic. (Try using
        ALT+SPACE, E, P inside the command prompt window)

    g.) Acknowledge the name confirmation.

    h.) Very important: Enter the geo-code for the world manually. The code is
        always '*'

    i.) Program should give you a confirmation message that all is well.

6.)     Choose your (ISO 3166-1 Alpha-2)-type (fancy name for region identifier
        in some internet pages) fictional code. This is the two character
        country identifier (like 'za' for South Africa, or 'pl' for Poland).
        Your code should not clash with the real-world: hence include a number.
        My fictional world has the code of 'v9'. I have chosen 'Q1' for your
        country.

7.)     Create your first Country

    a.) In the 'Destinations' sub-menu, enter '1'.

    b.) Enter "*" as your parent's geo-code.

    c.) Try out the random name generation feature. The names are in my conlang
        (constructed language). The first 10 are generated by randomly picking
        syllables from a list. The syllables are sometimes 'glued' together with
        a single vowel or consonant. See the appendix on how to read my conlang.
        The advantage is that you get the correct transliteration into Cyrillic.
        If you don't like any of the choices, enter '0',

    d.) At this stage, enter the geo-code in manually. Prefix your chosen
        2-character codes with a '0'. Hence, you will be entering a code like
        "0q1". The input for the geo-code is case insensitive.

    e.) You should get the message that your country has been created.

8.)     Create your first Province. Use your country's geocode ("0Q1") as the
        parent. We are skipping over the map for this area as well. Provincial
        geo-codes are single alphabetic characters ("Z").

9.)    Create your first District. Districts have 2 character ("VC") codes,
        with the first character not allowed to be a '0'. Hence, district of
        "0Q" is not valid: This is since this district's subdivision (the
        county) will have a geo-code clash with the country.
        District codes may inherit from the Province, but they don't have to.
        In my fictional world, they don't.

    a.) Once again, we 'Add an area' from the 'Destinations' sub-menu.

    b.) This time, lets select our map as reference.

    c.) Now we are prompted to enter the position of the District on the map.
        (If you don't have a map, enter dummy data of x: 100, y:50, a:25)
        In my TurboCAD program, I am able to select the polygon representing
        the district. That selection gives me the paper x and y coordinates. I
        use those to identify the position of the geographic entity on the map.

    d.) After entering the 'y'-coordinate, we are asked for the area. My
        TurboCAD has inspection box, where this data is supplied. the paper area
        is critical to the correct and accurate operation of the software.

    e.) Carry on making the correct decisions and stop at the geo-code entry.

    f.) Select 'no' for the geo-code question.

10.)    Repeat step 9 three times. Vary the area between 20 and 30, so that you
        can see the effect. (Dear programmer, this command is not recursive!
        break out of the loop!)

11.)    In the 'Destinations' menu, enter "G". Remember how we skipped over
        geo-code generation? We are now ready to add geo-codes to the Districts
        (Which are the children of a Province)
    a.) Enter "Z" as the parent (Province in this case)

    b.) Lets start off with the manual method, so enter 'y' in either case.

    c.) Your 3 children are now listed. The "(None)" shows their current
        geo-code. Let's select the first child by entering "1".

    d.) You are presented with 36 options. Note how the code has inherited from
        its parent. In my fictional world, the 'capital' usually gets the '0',
        but exceptions do occur. So, lets enter "26" to select the geo-code of
        "Z0".

    e.) Lets do the next assignment manually as well. Enter 'y'.

    f.) Notice that we have two children left. Lets pick the second child.

    g.) Look at options 25 and 26. Notice that "Z0" is missing from that list.

    h.) Lets choose "ZI" at random. Manual mode is used if the geo-code has
        some significant meaning.

    i.) Enter 'n', as we don't want any more manual assignments. "Grzeg's World"
        will choose the geocode for the last child for us at random. We are
        returned to the "Destinations" menu, ready for the next operation.

12.)    Select "2" to 'view the children'. This prints a quick view on the
        screen as well as a more detailed text document in logs.

13.)    Open "d_Z_children.txt"

14.)    There you will see additional information. The 'x', 'y' and even 'a'
        parameters will help you find the area on the map. Now you can cut the
        names and/or geocodes from this file and label your area on the map.

15.)    As an exercise, create 3 Counties within the geo-code "ZI" district.

16.)    As an exercise, create 2 Municipalities within one of your counties. Set
        the areas to 4.0 and 5.0 sq.mm respectively, for a 1:2,000,000 map. Your
        Municipality will be Agricultural. This is the final level for this
        tutorial.
        (I hope you did not forget to assign geo-codes to your counties...)

17.)    Look at the children of the County. Municipalities have 4-element
        geo-codes. For easier readability, they are hyphenated. Your areas
        should be 1600ha and 2000ha.

18.)    Municipality is as low as I am going to go. Hence, we can have people
        working on this level. if you noticed, we set the description to
        "Agricultural" two points back.

19.)    From the "Destinations" Menu, select "W": Add workplace:
    a.) Enter the geo-code of the area as usual.

    b.) There are a few options on offer of industry. I didn't want to swamp
        the user with large amount of choice. Select "Agricultural"

    c.) We have more options. What type of crop is being grown here? Lets choose
        Wheat.

    d.) Respond 'y' to the default name question. There is a future issue here
        if we choose to name our farm ourselves. That will be fixed in future
        versions.

    e.) The exact footprint is not known to us, so select 'n'

    f.) We get a summary of what we are doing. The whole Municipality (Town and
        Farm) is 1600ha. We need to leave some space for the town. Lets make the
        farm 85% of the total area. Enter "0.85"

20.)    Select "W" again, but this time for the other Municipality. This
        Municipality will have two farms: One wheat, one rice. Both farms will
        be 43% (enter as 0.43) of the total area.
    a.) Do the wheat farm first.

    b.) Select "W" again, and repeat for the Maize farm.

21.)    Do a pretty print on the last farm, and view the data

    a.) The total population is shown as N/A. It is not yet available. We'll
        fix that little bit later on.

    b.) Have a look at goods produced. Ignore the 'incomplete data' for now.
        Our farm is producing wheat, hay, maize and straw.

    c.) Scroll down to Workforce demand. There is no demand for 'rm' or 'rf',
        as these are 'rich male' and 'rich female'. These are your millionaires,
        your municipality is effectively a farming community. 'hm' and 'hf'
        are your 'high-income male' and female demographic. Usually, these are
        company owners, doctors. University-degreed people. There are some
        numbers around the 'mid-income' people. These are your Polytechnic
        educated people. On the farm, these are the managers. The 'low-income'
        demographic are your supervisors. The 'poor' out-number everybody. These
        are the poor souls (pardon the pun) who to the actual work on the farm.
        Day in, day out they make sure that their one hectare is in good health.
        Each farm has a number of vehicles. These are vehicles which require a
        number plate. These company vehicles can be used in the field and on
        the road. During harvest, these vehicles transport the crops to storage
        in town.

22.)    From the "Destinations" sub-menu, enter "B". Enter the geo-code of the
        Municipality you just viewed. Note, that the hyphen is entered as well.

23.)    Pretty print the Municipality you just "balanced".

    a.) We now know the total population demand for this Municipality. Mine is
        around 4,300 people.

    b.) There are 468 vehicles bearing the "ZIG"-number plate in my case.

    c.) Your workforce demand has increased: there is demand for policemen,
        firemen, ect. This software is written for the 1930's era, so there is
        very few televisions or radios. Entertainment is provided by the
        community theatres with dedicated actors.

    d.) If you are going to draw this town, then "Demand Households" shows you
        how many housing units (be it a house or an appartment) each of your
        wealth-demographic needs.

    e.) Supply Households is a field for a future version of the software.

    f.) The demographics go into detail of how many people you have. I use the
        code 'pax' (which is technically 'passenger') for people.

    g.) Next section (Preschoolers onwards) are usually cross all the wealth
        groups. I hope your community doesn't have too many people behind bars!

    h.) Religion is a mixture of real-world and made up. This determines how
        many places of worship I would need to build.

    i.) Bicycling is teh most popluar form of transport, given the era and the
        wealth-demographics dominating.

    j.) Police, Fire Department, etc. have combination of government-registered
        and civilian-registered vehicles. That is so that an undercover cop's
        cover doesn't get blown when he arrives in a "YP"-plated vehicle!

24.)    Balance the other Municipality.

25.)    From the "Destinations" Menu, enter "U", for the geo-code "Z".
    a.) In the command prompt, you will see that there were 3 child updates.
        Effectively, each parent has harvested data from all its children.

    b.) Pretty print for "Z".

    c.) You will notice that the province has population data, vehicle data.
        With that one command, we have recursively summarized all the data.

    d.) Go ahead, and pretty print "ZI". It shows similar information to "Z".
        The difference is that this is on the district level.

    e.) In my case, the Municipalities were in "ZIG". There, you will notice
        that the data is complete, as all Municipalities have been balanced.

    f.) This will come in handy on levels below "Municipality": Where the area
        is urban, and I have residential and work areas.

26.)    This is the end of the tutorial. You may continue with this setup,
        destroy this data, or simply abandon it. My recommendation is to abandon
        this data. I had an investment in my own world, hence I didn't want to
        destroy it. What I have done, is to re-route to another database inside
        a wrapper function.

    a.) find "def destinations(ccTremb)"

    b.) uncomment the top line,

    c.) comment out the bottom line.

    d.) I never had to do a data revovery into MongoDB. My world is included in
        this project. You may recover it and explore it. Some place names are
        personal, others are semi-personal while others are random.

Other features:
---------------

The main file is called 'my_world.py'. It has some utility features which help
to manage the database. The most notable is the "!"-option.

!-option
    This option sets up (or re-sets) the characteristic the 'constants' in the
    database. The data is stored in 'x_import_data.py'. The user may edit this
    data as to experiment. I would strongly suggest backing up the original
    prior to experimentation. Once an edit has been made, the software must be
    off-on cycled. This means exiting all the menus until the message
    "Program ended normally" is shown. The software is then restarted (usually
    the up-arrow and enter works), and "!" invoked to write the changes to the
    data base. Take note that the old data is deleted from the database first.
    It handles:

    >   The syllables which make up the random geographic place names. The
        syllables have been designed in Cyrillic.

    >   Male first names.
        >>  Currently, these provide inspiration for Saint-inspired place names
            like St. Aaron.
        >> Also, when combined with a surname, they can form a fictional person.
            That name can be used to name bridges, buildings, libraries,
            streets...
        >> They can be combined with a suffix to form a surname, as inspired by
            Scandinavian surames of Christen + ssen --> Christenssen

    >   Female first names.
        >>  Currently, these provide inspiration for Saint-inspired place names
            like St. Anne.
        >> Also, when combined with a surname, they can form a fictional person.
            That name can be used to name bridges, buildings, libraries,
            streets...

    >   Static surnames
        >>  Currently they provide insperation for surname-based towns like
            Fort Aitkin, or Bauerton
        >>  Could be combined with a first name to inspire a name of a building,
            bridge, ect.

    >   Dynamic surnames and
    >   Suffix surnames
        >>  are combined with a suffix to form a surname. For example, dynamic
            surname of "Gold" combined with suffix surname of "mann" results in
            "Goldmann". Another combination would yield "Goldberg", or simply
            "Golds"

    >   Demographic constants
        These are settings which define the populace. "prison_rate" for
        instance, describes the chance that the person we are creating is a
        criminal and is serving time. I ask python for a random floating point
        number between 0 and 1. If the number is less than "prison_rate",
        default value 0.0052, then the person is in prison. Effectively, there
        is a 0.52% chance of being locked up.
        Freternal rate is set at 1.9. So, on average, there will be 1.9
        unmarried people sharing a household. Some households will have
        2 people; others will have 1. A few will have 3 people sharing.

    >   City Services:
        These are the critical services that every populated place demands. Let
        us use the police as an example. The police services everybody,
        including the policemen living in the community. This is indicated by
        "serves":"iTOT-PAX", which is the reference to the community's
        demographic element. The ratio means that for every 200 residents, there
        is a single policeman. This 'single policeman' is called the "main"
        employee, A police station has a service capacity of 8000 residents. A
        population of 8001 would need two police stations running at
        half-capacity each. There are two demographic types employed at each
        level. This usually allows for gender splitting. There is one squad
        vehicle for every 4 police officers. (it is the 1930's and police do
        go out on foot)

        The supervisory position, is one step higher in the hierarchy. Here, the
        rate is with reference to the main employee. Our police station has 1
        detective (supervisor) for every 10 policemen.

        Management is one step higher up the hierarchy and similar rules apply.

        Support is best described as a nurse to a doctor.

    > Workplaces:
        This is the reason for existence of the community. At the time of
        writing this document, the list is not extensive. Feel free to add your
        own stuff. The Wheat farm entry is used as a bit of a tutorial
        explaining each field.
        One item not touched on in City services, is the 'static vehicle'. This
        is the minimum amount of vehicles in that location. The dynamic vehicles
        depend on the quantity of staff. Static vehicles are there for backup
        or for special purposes.
        When editing workplaces, please keep the "type"-field consistent with
        the category. Python groups the workplaces by type; this allows the user
        to choose the type of industry first.
        Workplaces may produce resources. In the case of the wheat farm, wheat
        and straw are produced. The rate and units are quite important as
        the software uses that with other data to calculate the total output of
        a particular instance.
        The minimum and maximum yields make sure that no two farms are the same.
        Storage capacity is used if the resource is a warehouse.

        Animal Husbandary uses the units of output as head/sq.km or head/ha.
        This is a count of how many animals are raised and sold per year.

        The Factory has an interesting unit of output: t/main. If the factory
        employs a single worker, the factory will output 5t per year. 10 workers
        will output 50t of Misc industrial items per year.

        Automotive industry will follow the factory model.

        Offices produce no transportable goods. They produce "None", in quotes,
        at a rate of 0-. The program recognises this as a dummy unit and does
        not clog up the warehouses with busy work.

@-option:
    The first version of this program was written in Ruby. Ruby stored its data
    in .json files. This option imports the existing data and pushes it into
    the database.

#-option:
    Semi-obsolete system of backing up the data to a .json file

*-option:
    This is where a competent programmer can directly modify the database. For
    conveniance, most of the items are pre-written. They are guarded by an
    'if False' statement to protect against accidental invocation. The competent
    programmer will
    > edit the 'False' to a 'True',
    > save the script,
    > shutdown and restart my_world.py
    > invoke "*"
    > invoke "." (shut down)
    > edit the 'True' to 'False'

&-option:
    This is where a competent programmer can form his own queries to any of the
    databases. The procedue is the same as with the "*"-option.

`-option:
    This generates the random names.

d-option:
    Destination sub menu. Disussed in great detail in the tutorial

------------
The Conlang:
------------
A Conlang is a portmanteau of "constructed" and "language". More accurately in
my case, a "constructed script".
Aged 11, I was moved to South Africa. I was enrolled in a standard,
English-speaking school, despite not speaking any of the language. One of the
prescribed study materials was an Oxford Dictionary. In the appendix, I found
the Greek and Cyrillic alphabets. I started to encode English words using the
Greek alphabet.
Over the years, my system evolved. I often invented symbols for sounds not
directly represented by the Greek Alphabet.
Eventually, we got a computer. There, I found something called a Character map.
At the end of the 8-bit encoded sequence were 32 accented characters. Slowly, I
started to incooperate those into my language. I discovered that my TurboCad 3
was supporting those characters. So, I made the most efficient use of those
available characters.
In parallel, my Greek-based writing system grew into a monster: There I was
mixing the Greek with Latin, Cyrilic, IPA symbols, and even one Koptic
character.
Now in the early 2010's those were a pain to type. I came across a this article
online: http://steen.free.fr/cyrpol/index.html
It is a thought experiment by Jan van Steenbergen, written in English, about
the Polish Language, being written in a foreign script.
Long story short, I adopted the system as my own with a few modifications. The
way that they handle the Polish "ą" and "ę" signs doesn't suit me. They have dug
up an ancient Cyrillic character which has those exact sounds. Since I'm using
a standard Russian-cyrillic keyboard, I made a modification to that system.
For the Vænesston Project (my current map), I made a concious decision to be
fully bi-lingual. Some of the geographic placenames are translated to Polish
and written in Cyrillic (Sacrilegious!)
I have been exposed to various cultures: they are reflected in my personal
conlang: here is the Rosetta stone:

Notes: The leading element (en. de. pl. af. fr. zu. indicate the inspration
for the character. They are: English, German, Afrikaans, French, Zulu)
The sound is highlighted with the braces.
Lat : Cyr : explanation
 a  :  а  : as in en.(a)lpha
 b  :  б  : as in en.(b)ravo
 c  :     : not used except for loan words
 d  :  д  : as in en.(d)ad
 e  :  э  : as in en.(e)cho
 f  :  ф  : as in en.(f)oxtrot
 g  :  г  : as in en.(g)olf
 gþ :  гъ : as in af.(g)e(g)ee
 h  :  х  : as in en.(h)otel
 hþ :  х  : as in pl.malu(ch); en.lo(ch)
 i  :  и  : as in en.(i)ndia
 j  :     : not used except in loan words
 k  :  к  : as in en.(k)ilo
 l  :  ль : as in en.(l)ima
 m  :  м  : as in en.(m)ike
 n  :  н  : as in en.(n)ovember
 o  :  о  : as in en.(o)scar
 oê :  ыщ : = œ + ^ as in en.B(er)nard
 p  :  п  : as in en.(p)apa
 q  :  кл : not used except in loan words
 qþ :  ъъ : as in zu.(q)hapela   (Dental click)
 r  :  р  : as in en.(r)omeo
 rþ :  ръ : French prounouciation of 'r'
 s  :  с  : as in en.(s)ierra
 sç :  сь : as in pl.(ś)nieg
 sþ :  ш  : as in en.(sh)eriff, pl.(sz)
 t  :  т  : as in en.(t)ango
 ts :  ц  : as in pl.(c)ukier, en.dan(c)e
 tç :  ть : as in pl.(ć)
 tþ :  ч  : as in en.(ch)ur(ch), pl.(cz)
 u  :  у  : as in en.f(oo)t, pl.(u)banie
 v  :  в  : as in en.(v)ictor
 w  :  л  : as in en.(w)hiskey, pl(ł)ódź
 x  :  кс : not used except in loan words
 xþ : щьь : as in zu.(x)aba
 y  :  ы  : as in pl.r(y)b(y)
 z  :  з  : as in en.(z)ulu
 zç :  зь : as in pl.(ź)le
 zþ :  ж  : as in en.mea(s)ure, pl(rz)
 à  :  аь : as in pl.(ą), fr.b(on) voyage
 á  :  эй : as in en.b(ay), en.m(a)de
 â  :  ащ : as in en.c(ar), circumflex inspired by French usage to lengthen
 ã  :     : Not used except in very rare loan words
ä,æ :аъ,э : as in de.b(ä)r
 å  :  щ  : See notes. "accent breaker", loan-word warning sign, silent letter
 ç  :  ь  : Not used alone, unless it is a foreign word. Soft sign approximate
 è  :  эь : as in pl.(ę)
 é  :     : not used except in loan words
 ê  :эъ,эщ: as in af.k(ê)rel, French circumflex usage to lengthen sound
 ë  :     : not used except in loan words
 ì  :     : not used except in loan words
 í  : ай  : as in en.(eye), b(i)ke
 î  : ищ  : as in en.b(ee). French circumflex usage to lengthen sound
 ï  :  й  : as in en.(y)es, pl.(j)ak
 ïa :  я  : as in pl.(ja)k
 ïà :  яь : as in pl.gra(ją)
 ïe :  е  : as in pl.(je)chać
 ïè :  еь : as in pl.(ję)zyk
 ïo :  ё  : as in en.(Jo)han,
 ð  :  дь : as in en.ma(th)
 ðþ : щдь : as in en.(th)at (rare usage)
 ñ  :  нь : as in pl.(ń), en.ca(ny)on
 ò  :     : not used except in loan words
 ó  :  ол : as in en.b(oa)t
 ô  :  ощ : as in en.d(oor), French circumflex usage to lengthen sound
 õ  :     : not used except in loan words
 ö  :     : not used except in loan words
 ø  :  ыъ : as in de.(ö)l
 œ  :  ыь : usually de.(ö)l; mostly loan words, extremely rare (åPhœnix)
 ù  :     : not used exept in loan words
 ú  :  ю  : as in en.(u)niform, pl.(ju)tro
 û  :  у  : as in en.g(oo)se, French circumflex usage to lengthen sound
 ü  :  уъ : as in de.gr(ü)ße, af.(u)
 ý  :     : not used except in loan words
 ÿ  :  и  : = iï as in en.F(io)na, pl.k(ij), pl.b(ij)
 ß  :  сс : as in de.sü(ß) (long s sound.)

Cyrillic soft-sign and hard sign.
Soft-sign (ь) is usually only used after (д, з, л, н, с, т) in order to modify
the sound. However, if the soft letter is followed by a vowel, then the
soft-sign merges into the vowel.

la  =  ль + а --> ля
le  =  ль + э --> ле
li  =  ль + и --> льи
lo  =  ль + о --> лё
lu  =  ль + у --> лю
ly  =  ль + ы --> льы

However,
lïa = ль + я --> лья

But
'India'  =  'Индъя' because 'Индя'  =  'Inða' ('Intha')
Note how the hard sign (ъ) is used to keep the 'd' hard and to prevent it
becoming 'ð'

In Polish: 'zjeść'  =  'зъесть' ('zïestç') because
           'зесть'  =  'zieść'  (zçestç)

Two consecutive soft sounds can have a singe soft-sign, as in the above example.

The soft sign can jump over a hard consonant, and affect the following vowel:
In Polish: 'źródło' (zçrudwo) = зрюдло

--------------------------
The Geo-codes and base-36:
--------------------------
Base-36 has been chosen as it was the most efficient system. It avoids going
into the lowercase, where case sensitivity becomes issue. It also avoids using
punctuation marks.

With the 5-digit 'my_id', I an store upto 60,000,000 destinations. I don't know
if the data-base would be able to handle that! The first designs were 4-ditit
identifiers. It was changed to try to accommodate the simulation of every
citizen in the province. Sanity prevailed, and my 5-year old laptop was spared
the grief of having to do such a huge computation.

The geo codes indicate political divisions. In my fictional world, they are
used everywhere: from Post codes, to vehicle number plates and often used on
road guidance signs.

The world is always a '*'.

The country is always 3 characters starting with '0'. The remaining characters
are alpha-numeric, almost like the country identifier on the internet. The
real-world only uses alphabetic characters; hence fictional worlds must contain
a number in any of the positions. The code for my country is "0V9"

The province is always a singe character.

The district is always two characters. Districts can inherit from the province,
but they don't have to. The district never starts with '0'. Hence, '0V' is
illegal

The county is always three characters. Inheritance of the code is compulsory.
So, if the district has the code "GY", then its counties will be "GYA" to "GYZ"
and "GY0" to "GY9" This gives the district a maximum of 36 counties. If there
are more, then the district needs to be split.

The Municipality is always four characters and contains a compulsory hyphen.
"GYG-N" would be a valid municipalitity, but "GYGN" is not.

There are items below Municipality; however, they haven't been properly tested.
